import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class TaskDAO {
    // Load the MySQL JDBC driver
    static {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
            throw new RuntimeException("MySQL JDBC driver not found. Make sure it's in your classpath.");
        }
    }

    private static final String JDBC_URL = "jdbc:mysql://localhost:3306/todoproject";
    private static final String JDBC_USER = "root";
    private static final String JDBC_PASSWORD = "";

    // Add a new task to the database
    public boolean addTask(Task task) {
        try (Connection conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);
             PreparedStatement ps = conn.prepareStatement("INSERT INTO todolist (description, state, user_id) VALUES (?, ?, ?)")) {

            ps.setString(1, task.getDescription());
            ps.setBoolean(2, task.isCompleted());
            ps.setInt(3, task.getUserId());

            int rowsAffected = ps.executeUpdate();

            return rowsAffected > 0; // Task added successfully if one or more rows were affected
        } catch (SQLException e) {
            e.printStackTrace();
            return false; // Handle the exception appropriately in a production application
        }
    }


    // Retrieve tasks for a specific user from the database
    public List<Task> getTasksForUser(int userId) {
        List<Task> tasks = new ArrayList<>();

        try (Connection conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);
             PreparedStatement ps = conn.prepareStatement("SELECT * FROM todolist WHERE user_id = ?")) {

            ps.setInt(1, userId);

            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    int taskId = rs.getInt("id");
                    String description = rs.getString("description");
                    boolean completed = rs.getBoolean("state");

                    Task task = new Task(taskId, description, completed, userId);
                    tasks.add(task);
                }
            }
            System.out.println("Tasks: " + tasks); 
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return tasks;
    }


    // You can implement other methods to update and delete tasks as needed

}
